#!/usr/bin/env python3
#
# Aiko Service: Aloha Honua
# ~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Usage
# ~~~~~
# ./aloha_honua.py
# ./aloha_honua.py --pipeline service_name protocol tags pipeline_topic_path
#
# To Do
# ~~~~~
# - #0: Bootstrap
#
# - #1: Create Service Abstract Base Class
#
# - #2: Integrate aiko_services_internal/video/video_process_service.py !
#   - IoC Pipeline stream processing
#   - Refactor Service discovery across Hosts / Containers into own file
#   - Handle Stream Frame handler resulting in multiple detections !
#     - Another ML Design Pattern !
#
# - Standalone versus Pipeline ...
#   - Provide "task start", "stream frame" and "task stop"
#     - Generate messages internally and queue them
#     - External client generates "stream frame" messages only
#   - Provide task parameters
#
# - By default, messages should be queued and handled by a background thread
#   - Includes default exception handler(s)
#
# - Implement as a sub-class, which maintains "aiko_" as an instance variable
#   - Set "options" via a dictionary, rather than individual set functions
#
# - Pipeline Stream (non-video) for IoC
#   - (task start), (frame ...), (task stop [now])
#
# - Implement as part of a Pipeline DAG using Service Discovery
#
# - Use Aiko Engine (py) for IoC
#   - Listen to "control" and publish on "state" topics
#   - Worker thread management (don't block MQTT thread)
# - Use Flask for HTTP inference ?
# - "import typing" (ask Josh)

import click

import aiko_services_2.framework as aiko

PROTOCOL = "github.com/geekscape/aiko_services/protocol/aloha_honua:0"

# --------------------------------------------------------------------------- #

parameter_1 = None

def on_message(aiko_, topic, payload_in):
    print("Message: " + topic + ": " + payload_in)
    return False

def on_task_start(aiko_):
    global parameter_1
    parameter_1 = aiko.get_parameter("parameter_1")     # TODO: Catch exception
    print(f"task_start(): parameter_1 = {parameter_1}")

def on_stream_frame(aiko_, stream_id, frame_id, payload_in):
    print("stream_frame():")

def on_task_stop(aiko_):
    print("task_stop():")

# --------------------------------------------------------------------------- #

@click.command()
@click.option("--pipeline", nargs=4, type=str)
def main(pipeline):
    aiko.set_protocol(PROTOCOL)  # TODO: Move into service.py
    aiko.add_message_handler(on_message)
    aiko.add_stream_handlers(on_task_start, on_stream_frame, on_task_stop)
    aiko.process(pipeline)

if __name__ == "__main__":
    main()

# --------------------------------------------------------------------------- #
